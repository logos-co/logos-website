"use strict";(self.webpackChunklogos_docs=self.webpackChunklogos_docs||[]).push([[669],{8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var s=a(6540);const l={},i=s.createContext(l);function t(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(i.Provider,{value:n},e.children)}},9746:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>r});var s=a(4848),l=a(8453);const i={title:"Package Manager Module",description:"Details about dependency management through the package manager module."},t="Package Manager Module",o={id:"modules/package-manager",title:"Package Manager Module",description:"Details about dependency management through the package manager module.",source:"@site/docs/modules/package-manager.md",sourceDirName:"modules",slug:"/modules/package-manager",permalink:"/logos-website/docs/modules/package-manager",draft:!1,unlisted:!1,editUrl:"https://github.com/logos-co/logos-website/edit/main/website/docs/modules/package-manager.md",tags:[],version:"current",frontMatter:{title:"Package Manager Module",description:"Details about dependency management through the package manager module."},sidebar:"docs",previous:{title:"Chat Module",permalink:"/logos-website/docs/modules/chat"},next:{title:"Waku Module",permalink:"/logos-website/docs/modules/waku"}},c={},r=[{value:"Overview",id:"overview",level:2},{value:"API",id:"api",level:2},{value:"Methods",id:"methods",level:3},{value:"Events",id:"events",level:3},{value:"Notes",id:"notes",level:3},{value:"Examples",id:"examples",level:2},{value:"C++",id:"c",level:3},{value:"Javascript",id:"javascript",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"package-manager-module",children:"Package Manager Module"}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Package Manager Module installs and enumerates third\u2011party plug\u2011ins. It copies plug\u2011in files into the core plug\u2011ins directory and requests the core to process their metadata so they become available to the system. Currently it simply scans a packages folder to list available plug\u2011ins and their metadata, this module can be updated in the future into somethign more complex while keeping some of the same APIs."}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"installPlugin(pluginPath: string)"})," \u2192 ",(0,s.jsx)(n.code,{children:"bool"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Copies the plug\u2011in at ",(0,s.jsx)(n.code,{children:"pluginPath"})," into the configured plug\u2011ins directory and asks the core to process it (via ",(0,s.jsx)(n.code,{children:"core_manager.processPlugin"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Returns ",(0,s.jsx)(n.code,{children:"true"})," if installation and processing succeed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getPackages()"})," \u2192 ",(0,s.jsx)(n.code,{children:"QJsonArray"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Scans the packages directory for ",(0,s.jsx)(n.code,{children:".so/.dll/.dylib"})," files, reads each plug\u2011in's metadata, and returns an array of JSON objects describing them."]}),"\n",(0,s.jsx)(n.li,{children:"Convenience method; not part of the minimal interface but available in the module."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"initLogos(logosAPI)"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Stores the ",(0,s.jsx)(n.code,{children:"LogosAPI"})," pointer so the module can call other modules (e.g., ",(0,s.jsx)(n.code,{children:"core_manager"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Called automatically during plug\u2011in initialization."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"No custom events are emitted by this module at present."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"installPlugin"})," expects a path to a valid plug\u2011in file; any extra files (in the same directory) declared in its metadata are copied alongside it."]}),"\n",(0,s.jsx)(n.li,{children:"The current implementation assumes packages reside in a specific directory; this can be swapped for a network\u2011backed source in the future."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.h3,{id:"c",children:"C++"}),"\n",(0,s.jsxs)(n.p,{children:["Using generated ",(0,s.jsx)(n.code,{children:"C++"})," wrappers from another module"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'// Initialize and install a plug\u2011in from a local path\nconst bool ok = logos.package_manager.installPlugin("/path/to/plugin.dylib");\nqInfo() << "installPlugin:" << ok;\n\n// List available packages (JSON array)\nconst auto pkgs = logos.package_manager.getPackages();\nqInfo() << "packages count:" << pkgs.size();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"javascript",children:"Javascript"}),"\n",(0,s.jsxs)(n.p,{children:["Using the ",(0,s.jsx)(n.code,{children:"JavaScript"})," SDK (reflective API)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'const LogosAPI = require(\'logos-api\');\n\nconst logos = new LogosAPI();\nlogos.start();\nlogos.processAndLoadPlugins(["package_manager"]);\nlogos.startEventProcessing();\n\n(async () => {\n  // Install a plugin\n  const ok = await logos.package_manager.installPlugin("/path/to/plugin.dylib");\n  console.log("installPlugin:", ok);\n\n  // Enumerate available packages\n  const pkgs = await logos.package_manager.getPackages();\n  console.log("packages:", pkgs);\n})();\n'})})]})}function g(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);