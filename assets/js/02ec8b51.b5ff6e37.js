"use strict";(self.webpackChunklogos_docs=self.webpackChunklogos_docs||[]).push([[737],{7807:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});var i=s(4848),l=s(8453);const a={title:"Nim SDK",description:"Using the Logos Nim bindings to integrate with the core."},o="Nim SDK",t={id:"sdks/nim-sdk",title:"Nim SDK",description:"Using the Logos Nim bindings to integrate with the core.",source:"@site/docs/sdks/nim-sdk.md",sourceDirName:"sdks",slug:"/sdks/nim-sdk",permalink:"/logos-website/docs/sdks/nim-sdk",draft:!1,unlisted:!1,editUrl:"https://github.com/logos-co/logos-website/edit/main/website/docs/sdks/nim-sdk.md",tags:[],version:"current",frontMatter:{title:"Nim SDK",description:"Using the Logos Nim bindings to integrate with the core."},sidebar:"docs",previous:{title:"JavaScript SDK",permalink:"/logos-website/docs/sdks/javascript-sdk"},next:{title:"C++ SDK",permalink:"/logos-website/docs/sdks/cpp-sdk"}},r={},c=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Using the Plugin API",id:"using-the-plugin-api",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Initialization Options",id:"initialization-options",level:3},{value:"Plugin Management",id:"plugin-management",level:3},{value:"Event Processing",id:"event-processing",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Constructor Options",id:"constructor-options",level:3},{value:"Core Methods",id:"core-methods",level:3},{value:"<code>start(): bool</code>",id:"start-bool",level:4},{value:"<code>cleanup()</code>",id:"cleanup",level:4},{value:"<code>getPluginStatus(): tuple[loaded: seq[string], known: seq[string]]</code>",id:"getpluginstatus-tupleloaded-seqstring-known-seqstring",level:4},{value:"<code>processAndLoadPlugin(pluginName: string): bool</code>",id:"processandloadpluginpluginname-string-bool",level:4},{value:"<code>processAndLoadPlugins(pluginNames: openArray[string]): seq[tuple[name: string, processed: bool, loaded: bool]]</code>",id:"processandloadpluginspluginnames-openarraystring-seqtuplename-string-processed-bool-loaded-bool",level:4},{value:"Asynchronous Operations",id:"asynchronous-operations",level:3},{value:"<code>callPluginMethodAsync(pluginName, methodName, paramsJson: string, callback: LogosCallback)</code>",id:"callpluginmethodasyncpluginname-methodname-paramsjson-string-callback-logoscallback",level:4},{value:"<code>registerEventListener(pluginName, eventName: string, callback: LogosCallback)</code>",id:"registereventlistenerpluginname-eventname-string-callback-logoscallback",level:4},{value:"Plugin API",id:"plugin-api",level:3},{value:"Method Calls",id:"method-calls",level:4},{value:"Event Listeners",id:"event-listeners",level:4},{value:"Type Inference",id:"type-inference",level:3},{value:"Examples",id:"examples",level:2},{value:"Chat Application",id:"chat-application",level:3},{value:"Plugin Method with Parameters",id:"plugin-method-with-parameters",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Library Not Found",id:"library-not-found",level:3},{value:"Plugin Loading Failures",id:"plugin-loading-failures",level:3},{value:"Events Not Firing",id:"events-not-firing",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"nim-sdk",children:"Nim SDK"}),"\n",(0,i.jsxs)(n.p,{children:["The Nim SDK provides a thin wrapper over the experimental C API exposed by ",(0,i.jsx)(n.code,{children:"liblogos_core"}),", enabling Nim applications to initialize the core, load modules, invoke plugin methods, and subscribe to events using a simple, callback-based API. It offers an interface for Nim developers to interact with the LogosCore system."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["The Nim SDK is located at ",(0,i.jsx)(n.code,{children:"logos-nim-sdk/logos_api.nim"}),". To use it in your Nim application, simply import the module:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:"import logos_api\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'import os, strformat\nimport logos_api\n\n# Initialize the API\nvar api = newLogosAPI(autoInit = true)\n\n# Start the core system\ndiscard api.start()\n\n# Load required modules\ndiscard api.processAndLoadPlugins(["waku_module", "chat"])\n\n# Start event processing (manual pumping required)\nwhile true:\n  api.processEventsTick()\n  sleep(50)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-the-plugin-api",children:"Using the Plugin API"}),"\n",(0,i.jsx)(n.p,{children:"The SDK provides a plugin-based API for method calls and event registration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'# Register event listener\napi.plugin("chat").on("chatMessage") do (success: bool, message: string):\n  if success:\n    echo "New message received: ", message\n\n# Call plugin method asynchronously\napi.plugin("chat").call("joinChannel", "baixa-chiado") do (success: bool, message: string):\n  if success:\n    echo "Successfully joined channel: ", message\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"initialization-options",children:"Initialization Options"}),"\n",(0,i.jsx)(n.p,{children:"The LogosAPI constructor accepts several configuration options:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'var api = newLogosAPI(\n  libPath = "/custom/path/to/liblogos_core.so",  # Custom library path\n  pluginsDir = "/custom/plugins/directory",       # Custom plugins directory\n  autoInit = true                                 # Auto-initialize (default: true)\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"plugin-management",children:"Plugin Management"}),"\n",(0,i.jsx)(n.p,{children:"The SDK provides comprehensive plugin management capabilities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'# Get plugin status\nlet status = api.getPluginStatus()\necho "Loaded plugins: ", status.loaded\necho "Known plugins: ", status.known\n\n# Process and load a single plugin\ndiscard api.processPlugin("chat")\ndiscard api.loadPlugin("chat")\n\n# Process and load multiple plugins\nlet results = api.processAndLoadPlugins(["waku_module", "chat", "wallet_module"])\nfor r in results:\n  echo &"Plugin {r.name}: processed={r.processed}, loaded={r.loaded}"\n\n# Unload a plugin\ndiscard api.unloadPlugin("chat")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"event-processing",children:"Event Processing"}),"\n",(0,i.jsx)(n.p,{children:"The SDK requires manual event processing since Nim applications don't run the Qt event loop automatically:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:"# Manual event processing (required for Nim)\nwhile true:\n  api.processEventsTick()\n  sleep(50)  # Process every 50ms\n\n# Or integrate with your application's event loop\nproc myAppEventLoop() =\n  while appRunning:\n    handleAppEvents()      # Your app's events\n    api.processEventsTick() # Logos events\n    sleep(16)              # ~60 FPS\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"constructor-options",children:"Constructor Options"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"libPath"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:'""'}),(0,i.jsx)(n.td,{children:"Custom path to liblogos_core library"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pluginsDir"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:'""'}),(0,i.jsx)(n.td,{children:"Custom plugins directory path"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"autoInit"})}),(0,i.jsx)(n.td,{children:"bool"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"Automatically initialize on construction"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"core-methods",children:"Core Methods"}),"\n",(0,i.jsx)(n.h4,{id:"start-bool",children:(0,i.jsx)(n.code,{children:"start(): bool"})}),"\n",(0,i.jsx)(n.p,{children:"Starts the LogosCore system. Must be called after initialization."}),"\n",(0,i.jsx)(n.h4,{id:"cleanup",children:(0,i.jsx)(n.code,{children:"cleanup()"})}),"\n",(0,i.jsx)(n.p,{children:"Cleans up resources and shuts down the system."}),"\n",(0,i.jsx)(n.h4,{id:"getpluginstatus-tupleloaded-seqstring-known-seqstring",children:(0,i.jsx)(n.code,{children:"getPluginStatus(): tuple[loaded: seq[string], known: seq[string]]"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns a tuple with ",(0,i.jsx)(n.code,{children:"loaded"})," and ",(0,i.jsx)(n.code,{children:"known"})," plugin arrays."]}),"\n",(0,i.jsx)(n.h4,{id:"processandloadpluginpluginname-string-bool",children:(0,i.jsx)(n.code,{children:"processAndLoadPlugin(pluginName: string): bool"})}),"\n",(0,i.jsx)(n.p,{children:"Processes and loads a single plugin."}),"\n",(0,i.jsx)(n.h4,{id:"processandloadpluginspluginnames-openarraystring-seqtuplename-string-processed-bool-loaded-bool",children:(0,i.jsx)(n.code,{children:"processAndLoadPlugins(pluginNames: openArray[string]): seq[tuple[name: string, processed: bool, loaded: bool]]"})}),"\n",(0,i.jsx)(n.p,{children:"Processes and loads multiple plugins. Returns a results sequence."}),"\n",(0,i.jsx)(n.h3,{id:"asynchronous-operations",children:"Asynchronous Operations"}),"\n",(0,i.jsx)(n.h4,{id:"callpluginmethodasyncpluginname-methodname-paramsjson-string-callback-logoscallback",children:(0,i.jsx)(n.code,{children:"callPluginMethodAsync(pluginName, methodName, paramsJson: string, callback: LogosCallback)"})}),"\n",(0,i.jsx)(n.p,{children:"Calls a plugin method asynchronously using the traditional callback approach."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pluginName"}),": Name of the target plugin"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"methodName"}),": Name of the method to call"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"paramsJson"}),": JSON string of parameters in format ",(0,i.jsx)(n.code,{children:"[{name, value, type}]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"}),": Function called with ",(0,i.jsx)(n.code,{children:"(success: bool, message: string)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"registereventlistenerpluginname-eventname-string-callback-logoscallback",children:(0,i.jsx)(n.code,{children:"registerEventListener(pluginName, eventName: string, callback: LogosCallback)"})}),"\n",(0,i.jsx)(n.p,{children:"Registers an event listener for plugin events."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pluginName"}),": Name of the plugin emitting events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName"}),": Name of the event to listen for"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"}),": Function called with ",(0,i.jsx)(n.code,{children:"(success: bool, message: string)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"plugin-api",children:"Plugin API"}),"\n",(0,i.jsx)(n.p,{children:"The plugin API provides a more ergonomic interface:"}),"\n",(0,i.jsx)(n.h4,{id:"method-calls",children:"Method Calls"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'# Automatically handles parameter conversion\napi.plugin("pluginName").call("methodName", "singleParam", callback)\napi.plugin("pluginName").call("methodName", ["param1", "param2"], callback)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"event-listeners",children:"Event Listeners"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'# Register event listeners with clean syntax\napi.plugin("pluginName").on("eventName") do (success: bool, message: string):\n  # Handle event\n'})}),"\n",(0,i.jsx)(n.h3,{id:"type-inference",children:"Type Inference"}),"\n",(0,i.jsx)(n.p,{children:"The plugin API automatically infers parameter types and converts them to the expected JSON format:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Single string values \u2192 wrapped as ",(0,i.jsx)(n.code,{children:'[{name: "arg0", value: "...", type: "string"}]'})]}),"\n",(0,i.jsxs)(n.li,{children:["Multiple string values \u2192 wrapped as ",(0,i.jsx)(n.code,{children:'[{name: "arg0", ...}, {name: "arg1", ...}]'})]}),"\n",(0,i.jsx)(n.li,{children:"JSON arrays \u2192 passed through directly"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"chat-application",children:"Chat Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'import os, strformat\nimport logos_api\n\nproc createChatApp() =\n  var api = newLogosAPI(autoInit = true)\n  discard api.start()\n  \n  # Load required modules\n  discard api.processAndLoadPlugins(["waku_module", "chat"])\n  \n  # Listen for incoming messages\n  api.plugin("chat").on("chatMessage") do (success: bool, message: string):\n    if success:\n      echo &"[chat] New message: {message}"\n  \n  # Initialize and join channel\n  api.plugin("chat").call("initialize", "[]") do (success: bool, message: string):\n    echo &"Chat initialized: {success}"\n  \n  # Allow time for initialization\n  for i in 0..20:\n    api.processEventsTick()\n    sleep(50)\n  \n  api.plugin("chat").call("joinChannel", "general") do (success: bool, message: string):\n    echo &"Joined channel: {success}"\n  \n  # Send a message\n  api.plugin("chat").call("sendMessage", ["general", "myNick", "Hello, world!"]) do (success: bool, message: string):\n    echo &"Message sent: {success}"\n  \n  # Keep the event loop running\n  while true:\n    api.processEventsTick()\n    sleep(50)\n\nwhen isMainModule:\n  createChatApp()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"plugin-method-with-parameters",children:"Plugin Method with Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'# Using traditional API with explicit JSON\nlet params = toJson([\n  Param(name: "channelName", value: "baixa-chiado", ptype: "string"),\n  Param(name: "nickname", value: "alice", ptype: "string")\n])\n\napi.callPluginMethodAsync("chat", "joinChannel", params) do (success: bool, message: string):\n  if success:\n    echo "Successfully joined channel: ", message\n\n# Using plugin API (equivalent)\napi.plugin("chat").call("joinChannel", ["baixa-chiado", "alice"]) do (success: bool, message: string):\n  if success:\n    echo "Successfully joined channel: ", message\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nim",children:'# Handle method call errors\napi.plugin("chat").call("sendMessage", "nonexistent-channel") do (success: bool, message: string):\n  if not success:\n    echo "Failed to send message: ", message\n\n# Check plugin loading results\nlet results = api.processAndLoadPlugins(["chat", "nonexistent_plugin"])\nfor r in results:\n  if not r.processed:\n    echo &"Failed to process plugin: {r.name}"\n  elif not r.loaded:\n    echo &"Failed to load plugin: {r.name}"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"library-not-found",children:"Library Not Found"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Failed to load library: /path/to/liblogos_core.so\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Build the core library first by running ",(0,i.jsx)(n.code,{children:"./scripts/run_core.sh build"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"plugin-loading-failures",children:"Plugin Loading Failures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"plugin=chat processed=false loaded=false\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure plugins are built and available in the plugins directory. Check that the plugin was processed successfully before loading."]}),"\n",(0,i.jsx)(n.h3,{id:"events-not-firing",children:"Events Not Firing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Make sure you're calling ",(0,i.jsx)(n.code,{children:"processEventsTick()"})," regularly in your main loop. This is critical for Nim applications since they don't run the Qt event loop automatically."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(6540);const l={},a=i.createContext(l);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);