"use strict";(self.webpackChunklogos_docs=self.webpackChunklogos_docs||[]).push([[41],{7620:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var l=o(4848),s=o(8453);const i={title:"How to Create a Module",description:"Steps for authoring new Logos modules with liblogos."},r="How to Create a Logos Module",d={id:"liblogos/how-to-create-a-module",title:"How to Create a Module",description:"Steps for authoring new Logos modules with liblogos.",source:"@site/docs/liblogos/how-to-create-a-module.md",sourceDirName:"liblogos",slug:"/liblogos/how-to-create-a-module",permalink:"/logos-website/docs/liblogos/how-to-create-a-module",draft:!1,unlisted:!1,editUrl:"https://github.com/logos-co/logos-website/edit/main/website/docs/liblogos/how-to-create-a-module.md",tags:[],version:"current",frontMatter:{title:"How to Create a Module",description:"Steps for authoring new Logos modules with liblogos."},sidebar:"docs",previous:{title:"Interacting with the Library",permalink:"/logos-website/docs/liblogos/interacting-with-the-library"},next:{title:"Architecture",permalink:"/logos-website/docs/liblogos/architecture"}},t={},a=[{value:"1) Create the Module Skeleton",id:"1-create-the-module-skeleton",level:2},{value:"2) Define the Interface",id:"2-define-the-interface",level:2},{value:"3) Implement the Plugin (with generated C++ API)",id:"3-implement-the-plugin-with-generated-c-api",level:2},{value:"4) Add <code>metadata.json</code> (declare dependencies for generation)",id:"4-add-metadatajson-declare-dependencies-for-generation",level:2},{value:"5) CMake Configuration (enable generated API)",id:"5-cmake-configuration-enable-generated-api",level:2},{value:"6) Build and Run",id:"6-build-and-run",level:2},{value:"7) Expose Methods and Events (using wrappers)",id:"7-expose-methods-and-events-using-wrappers",level:2},{value:"8) Calling Other Modules (using wrappers)",id:"8-calling-other-modules-using-wrappers",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"how-to-create-a-logos-module",children:"How to Create a Logos Module"}),"\n",(0,l.jsxs)(n.p,{children:["This guide walks you through creating a C++ Logos module (Qt plugin) that exposes methods and emits events over Qt Remote Objects using the Logos SDK. Use ",(0,l.jsx)(n.code,{children:"modules/template_module"})," as a reference implementation."]}),"\n",(0,l.jsx)(n.p,{children:"Prerequisites"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Qt Core and Qt RemoteObjects available to CMake"}),"\n",(0,l.jsx)(n.li,{children:"CMake and a C++17 toolchain"}),"\n",(0,l.jsx)(n.li,{children:"Built core and generator once (the scripts handle this)"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"1-create-the-module-skeleton",children:"1) Create the Module Skeleton"}),"\n",(0,l.jsx)(n.p,{children:"Directory layout"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"modules/your_module/\n  \u251c\u2500 CMakeLists.txt\n  \u251c\u2500 metadata.json\n  \u251c\u2500 your_module_interface.h\n  \u251c\u2500 your_module_plugin.h\n  \u2514\u2500 your_module_plugin.cpp\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"modules/template_module"})," as a starting point."]}),"\n",(0,l.jsx)(n.h2,{id:"2-define-the-interface",children:"2) Define the Interface"}),"\n",(0,l.jsxs)(n.p,{children:["Your interface inherits from ",(0,l.jsx)(n.code,{children:"PluginInterface"})," (from ",(0,l.jsx)(n.code,{children:"logos-liblogos/interface.h"}),"). Declare methods as ",(0,l.jsx)(n.code,{children:"Q_INVOKABLE"})," so other modules can call them remotely, and keep the standard ",(0,l.jsx)(n.code,{children:"eventResponse"})," signal for events."]}),"\n",(0,l.jsxs)(n.p,{children:["Example: ",(0,l.jsx)(n.code,{children:"your_module_interface.h"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#pragma once\n#include <QtCore/QObject>\n#include <QtCore/QVariant>\n#include "../../logos-liblogos/interface.h"\n\nclass YourModuleInterface : public PluginInterface {\npublic:\n    virtual ~YourModuleInterface() {}\n\n    Q_INVOKABLE virtual bool doWork(const QString& input) = 0;\n\nsignals:\n    // Required for event delivery via replicas\n    void eventResponse(const QString& eventName, const QVariantList& data);\n};\n\n#define YourModuleInterface_iid "org.logos.YourModuleInterface"\nQ_DECLARE_INTERFACE(YourModuleInterface, YourModuleInterface_iid)\n'})}),"\n",(0,l.jsx)(n.p,{children:"Notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Methods marked ",(0,l.jsx)(n.code,{children:"Q_INVOKABLE"})," are callable via the SDK and over Remote Objects."]}),"\n",(0,l.jsx)(n.li,{children:"Keep method signatures Qt-friendly (Qt types or simple PODs)."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"3-implement-the-plugin-with-generated-c-api",children:"3) Implement the Plugin (with generated C++ API)"}),"\n",(0,l.jsxs)(n.p,{children:["Subclass ",(0,l.jsx)(n.code,{children:"QObject"})," and your interface, add the required Qt plugin macros, and implement your logic. Implement ",(0,l.jsx)(n.code,{children:"initLogos(LogosAPI*)"})," to receive the SDK handle and construct the generated wrappers."]}),"\n",(0,l.jsxs)(n.p,{children:["Header: ",(0,l.jsx)(n.code,{children:"your_module_plugin.h"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#pragma once\n#include <QtCore/QObject>\n#include "your_module_interface.h"\n#include "../../logos-cpp-sdk/cpp/logos_api.h"\n#include "../../logos-cpp-sdk/cpp/generated/logos_sdk.h"\n\nclass YourModulePlugin : public QObject, public YourModuleInterface {\n    Q_OBJECT\n    Q_PLUGIN_METADATA(IID YourModuleInterface_iid FILE "metadata.json")\n    Q_INTERFACES(YourModuleInterface PluginInterface)\npublic:\n    QString name() const override { return "your_module"; }\n    QString version() const override { return "1.0.0"; }\n\n    Q_INVOKABLE bool doWork(const QString& input) override;\n    Q_INVOKABLE void initLogos(LogosAPI* logosAPIInstance);\n\nsignals:\n    void eventResponse(const QString& eventName, const QVariantList& data);\n\nprivate:\n    LogosModules* logos = nullptr; // generated wrappers aggregator\n};\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Implementation: ",(0,l.jsx)(n.code,{children:"your_module_plugin.cpp"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include "your_module_plugin.h"\n#include <QDebug>\n\nvoid YourModulePlugin::initLogos(LogosAPI* logosAPIInstance) {\n    // Provided by PluginInterface base\n    logosAPI = logosAPIInstance;\n    delete logos; // if re-initializing\n    logos = logosAPI ? new LogosModules(logosAPI) : nullptr;\n    if (logos) {\n        // Enable event helper for this module\n        logos->your_module.setEventSource(this);\n    }\n}\n\nbool YourModulePlugin::doWork(const QString& input) {\n    qDebug() << "doWork called with" << input;\n\n    // Example: call another module via generated wrappers\n    // Ensure that module appears in metadata.json "dependencies"\n    // bool ok = logos->waku_module.relayPublish("/topic", someJson);\n\n    // Emit an event using the generated helper\n    if (logos) {\n        logos->your_module.trigger("workDone", input);\n    }\n    return true;\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"Notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["You do not register the object yourself; the ",(0,l.jsx)(n.code,{children:"logos_host"})," loads your plugin and the provider calls ",(0,l.jsx)(n.code,{children:"initLogos(LogosAPI*)"})," before exposing it."]}),"\n",(0,l.jsxs)(n.li,{children:["Prefer the generated wrappers (",(0,l.jsx)(n.code,{children:"logos->module.method(...)"}),") over ",(0,l.jsx)(n.code,{children:"getClient(...)"})," for readability and type-safety."]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"4-add-metadatajson-declare-dependencies-for-generation",children:["4) Add ",(0,l.jsx)(n.code,{children:"metadata.json"})," (declare dependencies for generation)"]}),"\n",(0,l.jsx)(n.p,{children:"This file declares the module\u2019s identity and capabilities."}),"\n",(0,l.jsxs)(n.p,{children:["Example: ",(0,l.jsx)(n.code,{children:"metadata.json"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "name": "your_module",\n  "version": "1.0.0",\n  "description": "My sample module",\n  "author": "Your Name",\n  "type": "core",\n  "category": "example",\n  "main": "your_module_plugin",\n  "dependencies": ["waku_module"],\n  "capabilities": []\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"Fields and generator behavior"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"name"}),", ",(0,l.jsx)(n.code,{children:"version"}),", ",(0,l.jsx)(n.code,{children:"description"}),", ",(0,l.jsx)(n.code,{children:"author"}),": basic metadata"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"type"}),": typically ",(0,l.jsx)(n.code,{children:"core"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"category"}),": grouping tag"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"main"}),": the plugin class base name used by the loader (e.g., ",(0,l.jsx)(n.code,{children:"template_module_plugin"}),")"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"dependencies"}),": modules your plugin needs to call. The C++ generator reads this list to emit typed wrappers so you can call them as ",(0,l.jsx)(n.code,{children:"logos-><module>.<method>(...)"}),". It also emits a wrapper for your own module and always includes ",(0,l.jsx)(n.code,{children:"core_manager"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"capabilities"}),": feature flags used by the capability module"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"5-cmake-configuration-enable-generated-api",children:"5) CMake Configuration (enable generated API)"}),"\n",(0,l.jsx)(n.p,{children:"Follow the template\u2019s CMake setup. Key points:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Find Qt Core and RemoteObjects"}),"\n",(0,l.jsxs)(n.li,{children:["Run the Logos C++ generator on your ",(0,l.jsx)(n.code,{children:"metadata.json"})," before building"]}),"\n",(0,l.jsxs)(n.li,{children:["Build a shared library without the ",(0,l.jsx)(n.code,{children:"lib"})," prefix"]}),"\n",(0,l.jsx)(n.li,{children:"Link Qt and include the SDK sources"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Minimal ",(0,l.jsx)(n.code,{children:"CMakeLists.txt"})," excerpt"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:'set(CMAKE_AUTOMOC ON)\nfind_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core RemoteObjects)\n\nset(CPP_GENERATOR "${CMAKE_SOURCE_DIR}/../build/cpp-generator/bin/logos-cpp-generator")\nset(REPO_ROOT "${CMAKE_SOURCE_DIR}/..")\nset(PLUGINS_OUTPUT_DIR "${CMAKE_BINARY_DIR}/modules")\nset(METADATA_JSON "${CMAKE_CURRENT_SOURCE_DIR}/metadata.json")\n\nadd_custom_target(run_cpp_generator_your_module\n  COMMAND "${CPP_GENERATOR}" --metadata "${METADATA_JSON}" --module-dir "${PLUGINS_OUTPUT_DIR}"\n  WORKING_DIRECTORY "${REPO_ROOT}")\nadd_dependencies(run_cpp_generator_your_module cpp_generator_build)\n\nset(PLUGIN_SOURCES\n  your_module_plugin.cpp\n  your_module_plugin.h\n  your_module_interface.h\n  ${CMAKE_SOURCE_DIR}/../logos-liblogos/interface.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/generated/logos_sdk.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api_client.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api_client.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api_consumer.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api_consumer.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api_provider.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/logos_api_provider.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/token_manager.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/token_manager.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/module_proxy.cpp\n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/module_proxy.h)\n\nadd_library(your_module_plugin SHARED ${PLUGIN_SOURCES})\nadd_dependencies(your_module_plugin run_cpp_generator_your_module)\nset_target_properties(your_module_plugin PROPERTIES PREFIX "")\n\ntarget_link_libraries(your_module_plugin PRIVATE Qt${QT_VERSION_MAJOR}::Core Qt${QT_VERSION_MAJOR}::RemoteObjects)\ntarget_include_directories(your_module_plugin PRIVATE \n  ${CMAKE_CURRENT_SOURCE_DIR} \n  ${CMAKE_SOURCE_DIR}/../logos-liblogos \n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp \n  ${CMAKE_CURRENT_SOURCE_DIR}/../../logos-cpp-sdk/cpp/generated)\n\nset_target_properties(your_module_plugin PROPERTIES\n  LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/modules"\n  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/modules")\n'})}),"\n",(0,l.jsxs)(n.p,{children:["For a full example, see ",(0,l.jsx)(n.code,{children:"modules/template_module/CMakeLists.txt"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"6-build-and-run",children:"6) Build and Run"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Build core (also builds the generator): ",(0,l.jsx)(n.code,{children:"./scripts/run_core.sh build"})]}),"\n",(0,l.jsxs)(n.li,{children:["Build modules: ",(0,l.jsx)(n.code,{children:"./scripts/build_core_modules.sh"})]}),"\n",(0,l.jsxs)(n.li,{children:["Run the core app (optional): ",(0,l.jsx)(n.code,{children:"./scripts/run_core.sh"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Artifacts"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Built plugins are placed under ",(0,l.jsx)(n.code,{children:"modules/build/modules"})," and copied to ",(0,l.jsx)(n.code,{children:"logos-liblogos/build/modules"}),". The logos-liblogos/FFI loaders look in ",(0,l.jsx)(n.code,{children:"logos-liblogos/build/modules"})," by default."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"7-expose-methods-and-events-using-wrappers",children:"7) Expose Methods and Events (using wrappers)"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Methods: mark as ",(0,l.jsx)(n.code,{children:"Q_INVOKABLE"})," in your interface and implement them in the plugin. They become available to other modules and to external clients (via ",(0,l.jsx)(n.code,{children:"liblogos_core"})," FFI) and as generated wrapper methods."]}),"\n",(0,l.jsxs)(n.li,{children:["Events: in ",(0,l.jsx)(n.code,{children:"initLogos"}),", call ",(0,l.jsx)(n.code,{children:"logos->your_module.setEventSource(this)"}),", then emit with ",(0,l.jsx)(n.code,{children:'logos->your_module.trigger("eventName", args...)'})," or ",(0,l.jsx)(n.code,{children:"trigger(eventName, QVariantList)"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"8-calling-other-modules-using-wrappers",children:"8) Calling Other Modules (using wrappers)"}),"\n",(0,l.jsxs)(n.p,{children:["Use the generated wrappers. The SDK handles connections, tokens, and forwarding via ",(0,l.jsx)(n.code,{children:"ModuleProxy"})," under the hood."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'// Subscribe/publish via Waku (declare "waku_module" in metadata.dependencies)\nbool subOk = logos->waku_module.relaySubscribe("/waku/2/rs/16/32");\nbool pubOk = logos->waku_module.relayPublish("/waku/2/rs/16/32", jsonWakuMessage);\n\n// Listen to another module\'s events\nlogos->chat.on("chatMessage", [this](const QVariantList& data) {\n    qDebug() << "chat event" << data;\n});\n'})}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Module not discovered: ensure your library ends up in ",(0,l.jsx)(n.code,{children:"logos-liblogos/build/modules"})," and ",(0,l.jsx)(n.code,{children:"metadata.json"})," is valid."]}),"\n",(0,l.jsxs)(n.li,{children:["Methods not callable: check ",(0,l.jsx)(n.code,{children:"Q_INVOKABLE"})," on interface methods and that the plugin implements ",(0,l.jsx)(n.code,{children:"Q_INTERFACES(YourModuleInterface PluginInterface)"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["No events received: verify you call ",(0,l.jsx)(n.code,{children:"onEventResponse(...)"})," and that clients are processing Qt events."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var l=o(6540);const s={},i=l.createContext(s);function r(e){const n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);