"use strict";(self.webpackChunklogos_docs=self.webpackChunklogos_docs||[]).push([[841],{2142:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=s(4848),l=s(8453);const t={title:"JavaScript SDK",slug:"/sdks/javascript-sdk",description:"JavaScript SDK to interact with LogosCore and its modules"},a="JavaScript SDK",o={id:"sdks/javascript-sdk",title:"JavaScript SDK",description:"JavaScript SDK to interact with LogosCore and its modules",source:"@site/docs/sdks/javascript-sdk.md",sourceDirName:"sdks",slug:"/sdks/javascript-sdk",permalink:"/logos-website/docs/sdks/javascript-sdk",draft:!1,unlisted:!1,editUrl:"https://github.com/logos-co/logos-website/edit/main/website/docs/sdks/javascript-sdk.md",tags:[],version:"current",frontMatter:{title:"JavaScript SDK",slug:"/sdks/javascript-sdk",description:"JavaScript SDK to interact with LogosCore and its modules"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/logos-website/docs/getting-started"},next:{title:"Nim SDK",permalink:"/logos-website/docs/sdks/nim-sdk"}},r={},c=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Using the Traditional API",id:"using-the-traditional-api",level:3},{value:"Using the Reflective API",id:"using-the-reflective-api",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Initialization Options",id:"initialization-options",level:3},{value:"Plugin Management",id:"plugin-management",level:3},{value:"Event Processing",id:"event-processing",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Constructor Options",id:"constructor-options",level:3},{value:"Core Methods",id:"core-methods",level:3},{value:"<code>start()</code>",id:"start",level:4},{value:"<code>cleanup()</code>",id:"cleanup",level:4},{value:"<code>getPluginStatus()</code>",id:"getpluginstatus",level:4},{value:"<code>processAndLoadPlugin(pluginName)</code>",id:"processandloadpluginpluginname",level:4},{value:"<code>processAndLoadPlugins(pluginNames)</code>",id:"processandloadpluginspluginnames",level:4},{value:"Asynchronous Operations",id:"asynchronous-operations",level:3},{value:"<code>callPluginMethodAsync(pluginName, methodName, params, callback)</code>",id:"callpluginmethodasyncpluginname-methodname-params-callback",level:4},{value:"<code>registerEventListener(pluginName, eventName, callback)</code>",id:"registereventlistenerpluginname-eventname-callback",level:4},{value:"Reflective API",id:"reflective-api",level:3},{value:"Method Calls",id:"method-calls",level:4},{value:"Event Listeners",id:"event-listeners",level:4},{value:"Type Inference",id:"type-inference",level:3},{value:"Examples",id:"examples",level:2},{value:"Chat Application",id:"chat-application",level:3},{value:"Plugin Method with Parameters",id:"plugin-method-with-parameters",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Library Not Found",id:"library-not-found",level:3},{value:"Plugin Loading Failures",id:"plugin-loading-failures",level:3},{value:"Event Processing Issues",id:"event-processing-issues",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"javascript-sdk",children:"JavaScript SDK"}),"\n",(0,i.jsx)(n.p,{children:"The Logos JavaScript SDK provides a convenient way to interact with the LogosCore system and its modules from Node.js applications. It wraps the native liblogos_core library using FFI (Foreign Function Interface) and offers both low-level and high-level APIs for plugin management, method calls, and event handling."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["The experimental JavaScript SDK is located at ",(0,i.jsx)(n.code,{children:"./logos-js-sdk"}),". After installing the package via NPM, you can start using it immediately:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install logos-api\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const LogosAPI = require(\'logos-api\');\n\n// Initialize the API\nconst logos = new LogosAPI();\n\n// Start the core system\nlogos.start();\n\n// Load required modules\nlogos.processAndLoadPlugins(["waku_module", "chat"]);\n\n// Start event processing\nlogos.startEventProcessing();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-the-traditional-api",children:"Using the Traditional API"}),"\n",(0,i.jsx)(n.p,{children:"The traditional API provides explicit method calls and event registration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Register event listener\nlogos.registerEventListener('chat', 'chatMessage', (success, message, meta) => {\n    if (success) {\n        console.log(\"New message received:\", message);\n    }\n});\n\n// Call plugin method asynchronously\nconst result = await logos.callPluginMethodAsync(\n    'chat', \n    'joinChannel', \n    JSON.stringify([{\n        name: \"channelName\", \n        value: \"baixa-chiado\", \n        type: \"string\"\n    }])\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"using-the-reflective-api",children:"Using the Reflective API"}),"\n",(0,i.jsx)(n.p,{children:"The SDK also supports a more ergonomic reflective API that maps plugins and their methods directly to JavaScript objects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Method calls return Promises\nawait logos.chat.initialize();\nawait logos.chat.joinChannel("baixa-chiado");\nawait logos.chat.sendMessage("baixa-chiado", "nick", "hello!");\n\n// Event listeners with cleaner syntax\nconst listenerId = logos.chat.onChatMessage((evt) => {\n    console.log(\'Chat event received:\', evt);\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"initialization-options",children:"Initialization Options"}),"\n",(0,i.jsx)(n.p,{children:"The LogosAPI constructor accepts several configuration options:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const logos = new LogosAPI({\n    libPath: '/custom/path/to/liblogos_core.dylib',  // Custom library path\n    pluginsDir: '/custom/plugins/directory',          // Custom plugins directory\n    autoInit: true                                    // Auto-initialize (default: true)\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"plugin-management",children:"Plugin Management"}),"\n",(0,i.jsx)(n.p,{children:"The SDK provides comprehensive plugin management capabilities:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Get plugin status\nconst status = logos.getPluginStatus();\nconsole.log('Loaded plugins:', status.loaded);\nconsole.log('Known plugins:', status.known);\n\n// Process and load a single plugin\nlogos.processAndLoadPlugin('chat');\n\n// Process and load multiple plugins\nconst results = logos.processAndLoadPlugins(['waku_module', 'chat', 'wallet_module']);\nconsole.log('Plugin loading results:', results);\n\n// Unload a plugin\nlogos.unloadPlugin('chat');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"event-processing",children:"Event Processing"}),"\n",(0,i.jsx)(n.p,{children:"The SDK handles Qt events automatically when you start event processing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Start automatic event processing (recommended)\nlogos.startEventProcessing(100); // Process every 100ms\n\n// Or manually process events\nsetInterval(() => {\n    logos.processEvents();\n}, 50);\n\n// Stop automatic event processing\nlogos.stopEventProcessing();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsx)(n.h3,{id:"constructor-options",children:"Constructor Options"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Option"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"libPath"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"null"}),(0,i.jsx)(n.td,{children:"Custom path to liblogos_core library"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"pluginsDir"})}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"null"}),(0,i.jsx)(n.td,{children:"Custom plugins directory path"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"autoInit"})}),(0,i.jsx)(n.td,{children:"boolean"}),(0,i.jsx)(n.td,{children:"true"}),(0,i.jsx)(n.td,{children:"Automatically initialize on construction"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"core-methods",children:"Core Methods"}),"\n",(0,i.jsx)(n.h4,{id:"start",children:(0,i.jsx)(n.code,{children:"start()"})}),"\n",(0,i.jsx)(n.p,{children:"Starts the LogosCore system. Must be called after initialization."}),"\n",(0,i.jsx)(n.h4,{id:"cleanup",children:(0,i.jsx)(n.code,{children:"cleanup()"})}),"\n",(0,i.jsx)(n.p,{children:"Cleans up resources and shuts down the system."}),"\n",(0,i.jsx)(n.h4,{id:"getpluginstatus",children:(0,i.jsx)(n.code,{children:"getPluginStatus()"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns an object with ",(0,i.jsx)(n.code,{children:"loaded"})," and ",(0,i.jsx)(n.code,{children:"known"})," plugin arrays."]}),"\n",(0,i.jsx)(n.h4,{id:"processandloadpluginpluginname",children:(0,i.jsx)(n.code,{children:"processAndLoadPlugin(pluginName)"})}),"\n",(0,i.jsx)(n.p,{children:"Processes and loads a single plugin."}),"\n",(0,i.jsx)(n.h4,{id:"processandloadpluginspluginnames",children:(0,i.jsx)(n.code,{children:"processAndLoadPlugins(pluginNames)"})}),"\n",(0,i.jsx)(n.p,{children:"Processes and loads multiple plugins. Returns a results object."}),"\n",(0,i.jsx)(n.h3,{id:"asynchronous-operations",children:"Asynchronous Operations"}),"\n",(0,i.jsx)(n.h4,{id:"callpluginmethodasyncpluginname-methodname-params-callback",children:(0,i.jsx)(n.code,{children:"callPluginMethodAsync(pluginName, methodName, params, callback)"})}),"\n",(0,i.jsx)(n.p,{children:"Calls a plugin method asynchronously using the traditional callback approach."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pluginName"}),": Name of the target plugin"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"methodName"}),": Name of the method to call"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"params"}),": JSON string of parameters in format ",(0,i.jsx)(n.code,{children:"[{name, value, type}]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"}),": Function called with ",(0,i.jsx)(n.code,{children:"(success, message, meta)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"registereventlistenerpluginname-eventname-callback",children:(0,i.jsx)(n.code,{children:"registerEventListener(pluginName, eventName, callback)"})}),"\n",(0,i.jsx)(n.p,{children:"Registers an event listener for plugin events."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pluginName"}),": Name of the plugin emitting events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"eventName"}),": Name of the event to listen for"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"callback"}),": Function called with ",(0,i.jsx)(n.code,{children:"(success, message, meta)"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"reflective-api",children:"Reflective API"}),"\n",(0,i.jsx)(n.p,{children:"The reflective API provides a more JavaScript-friendly interface:"}),"\n",(0,i.jsx)(n.h4,{id:"method-calls",children:"Method Calls"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Automatically converts arguments to the expected format\nawait logos.pluginName.methodName(arg1, arg2, ...);\n"})}),"\n",(0,i.jsx)(n.h4,{id:"event-listeners",children:"Event Listeners"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Register event listeners with camelCase naming\nconst listenerId = logos.pluginName.onEventName((eventData) => {\n    // Handle event\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type-inference",children:"Type Inference"}),"\n",(0,i.jsx)(n.p,{children:"The reflective API automatically infers parameter types:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"boolean"})," \u2192 ",(0,i.jsx)(n.code,{children:"bool"})," type"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"number"})," (integer) \u2192 ",(0,i.jsx)(n.code,{children:"int"})," type"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"number"})," (float) \u2192 ",(0,i.jsx)(n.code,{children:"double"})," type"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"string"})," \u2192 ",(0,i.jsx)(n.code,{children:"string"})," type"]}),"\n",(0,i.jsxs)(n.li,{children:["Objects \u2192 JSON stringified as ",(0,i.jsx)(n.code,{children:"string"})," type"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"chat-application",children:"Chat Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const LogosAPI = require(\'logos-api\');\n\nasync function createChatApp() {\n    const logos = new LogosAPI();\n    logos.start();\n    \n    // Load required modules\n    logos.processAndLoadPlugins(["waku_module", "chat"]);\n    logos.startEventProcessing();\n    \n    // Listen for incoming messages\n    logos.chat.onChatMessage((message) => {\n        console.log(`[${message.channel}] ${message.nick}: ${message.content}`);\n    });\n    \n    // Initialize and join channel\n    await logos.chat.initialize();\n    await logos.chat.joinChannel("general");\n    \n    // Send a message\n    await logos.chat.sendMessage("general", "myNick", "Hello, world!");\n}\n\ncreateChatApp().catch(console.error);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"plugin-method-with-parameters",children:"Plugin Method with Parameters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Using traditional API\nconst params = JSON.stringify([\n    { name: "channelName", value: "baixa-chiado", type: "string" },\n    { name: "nickname", value: "alice", type: "string" }\n]);\n\nlogos.callPluginMethodAsync(\'chat\', \'joinChannel\', params, (success, result) => {\n    if (success) {\n        console.log(\'Successfully joined channel:\', result);\n    }\n});\n\n// Using reflective API (equivalent)\nconst result = await logos.chat.joinChannel("baixa-chiado", "alice");\nconsole.log(\'Successfully joined channel:\', result);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"try {\n    await logos.chat.sendMessage(\"nonexistent-channel\", \"nick\", \"message\");\n} catch (error) {\n    console.error('Failed to send message:', error);\n}\n\n// With traditional API\nlogos.callPluginMethodAsync('chat', 'sendMessage', params, (success, message) => {\n    if (!success) {\n        console.error('Method call failed:', message);\n    }\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"library-not-found",children:"Library Not Found"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Library file not found at: /path/to/liblogos_core.dylib\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Build the core library first by running ",(0,i.jsx)(n.code,{children:"./scripts/run_core.sh build"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"plugin-loading-failures",children:"Plugin Loading Failures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Failed to load plugin: chat\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Ensure plugins are built and available in the plugins directory. Check that the plugin was processed successfully before loading."]}),"\n",(0,i.jsx)(n.h3,{id:"event-processing-issues",children:"Event Processing Issues"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Make sure to call ",(0,i.jsx)(n.code,{children:"startEventProcessing()"})," or manually process events with ",(0,i.jsx)(n.code,{children:"setInterval(() => logos.processEvents(), 50)"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const l={},t=i.createContext(l);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);